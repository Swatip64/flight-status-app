{"version":3,"sources":["components/FlightStatusDashboard.js","components/NotificationsPanel.js","App.js","firebase-config.js","index.js"],"names":["FlightStatusDashboard","flights","setFlights","useState","searchTerm","setSearchTerm","useEffect","async","response","axios","get","Array","isArray","data","console","error","fetchFlights","socket","WebSocket","onmessage","event","updatedFlightData","JSON","parse","prevFlights","map","flight","find","updated","id","onerror","close","filteredFlights","filter","flightNumber","toLowerCase","includes","React","createElement","className","type","placeholder","value","onChange","e","target","length","key","status","gate","arrivalTime","boardingTime","colSpan","NotificationsPanel","notifications","setNotifications","preferences","setPreferences","sms","email","app","fetch","json","fetchNotifications","handlePreferenceChange","prev","checked","notification","message","App","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","messaging","getMessaging","getDeviceToken","token","getToken","vapidKey","log","sendTokenToServer","method","headers","body","stringify","ok","onMessage","payload","alert","concat","title","Notification","requestPermission","requestNotificationPermission","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a4199388.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst FlightStatusDashboard = () => {\r\n  const [flights, setFlights] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Fetch flight data\r\n    const fetchFlights = async () => {\r\n      try {\r\n        const response = await axios.get('/api/flight-status'); // Adjust endpoint if necessary\r\n        if (Array.isArray(response.data)) {\r\n          setFlights(response.data);\r\n        } else {\r\n          console.error('Expected an array but got:', response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching flight data:', error);\r\n      }\r\n    };\r\n\r\n    fetchFlights();\r\n\r\n    // WebSocket for real-time updates\r\n    const socket = new WebSocket('ws://localhost:5000/updates'); // Update WebSocket URL if necessary\r\n\r\n    socket.onmessage = (event) => {\r\n      try {\r\n        const updatedFlightData = JSON.parse(event.data);\r\n        if (Array.isArray(updatedFlightData)) {\r\n          setFlights((prevFlights) =>\r\n            prevFlights.map((flight) =>\r\n              updatedFlightData.find((updated) => updated.id === flight.id) || flight\r\n            )\r\n          );\r\n        } else {\r\n          console.error('Expected an array but got:', updatedFlightData);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error processing WebSocket message:', error);\r\n      }\r\n    };\r\n\r\n    socket.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n\r\n    return () => {\r\n      socket.close();\r\n    };\r\n  }, []);\r\n\r\n  // Filter flights based on search term\r\n  const filteredFlights = flights.filter((flight) =>\r\n    flight.flightNumber.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"flight-status-dashboard\">\r\n      <h2>Flight Status Dashboard</h2>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search flights\"\r\n        value={searchTerm}\r\n        onChange={(e) => setSearchTerm(e.target.value)}\r\n      />\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Flight Number</th>\r\n            <th>Status</th>\r\n            <th>Gate</th>\r\n            <th>Arrival Time</th>\r\n            <th>Boarding Time</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {filteredFlights.length > 0 ? (\r\n            filteredFlights.map((flight) => (\r\n              <tr key={flight.id}>\r\n                <td>{flight.flightNumber}</td>\r\n                <td>{flight.status}</td>\r\n                <td>{flight.gate}</td>\r\n                <td>{flight.arrivalTime}</td>\r\n                <td>{flight.boardingTime}</td>\r\n              </tr>\r\n            ))\r\n          ) : (\r\n            <tr>\r\n              <td colSpan=\"5\">No flights available</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FlightStatusDashboard;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst NotificationsPanel = () => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [preferences, setPreferences] = useState({\r\n    sms: true,\r\n    email: true,\r\n    app: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Fetch notifications (mock data for now)\r\n    const fetchNotifications = async () => {\r\n      try {\r\n        const response = await fetch('/api/notifications');\r\n        const data = await response.json();\r\n        setNotifications(data.notifications);\r\n      } catch (error) {\r\n        console.error('Error fetching notifications:', error);\r\n      }\r\n    };\r\n\r\n    fetchNotifications();\r\n  }, []);\r\n\r\n  const handlePreferenceChange = (type) => {\r\n    setPreferences((prev) => ({\r\n      ...prev,\r\n      [type]: !prev[type],\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"notifications-panel\">\r\n      <h2>Notifications</h2>\r\n      <div className=\"notification-settings\">\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={preferences.sms}\r\n            onChange={() => handlePreferenceChange('sms')}\r\n          />\r\n          SMS Notifications\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={preferences.email}\r\n            onChange={() => handlePreferenceChange('email')}\r\n          />\r\n          Email Notifications\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={preferences.app}\r\n            onChange={() => handlePreferenceChange('app')}\r\n          />\r\n          App Notifications\r\n        </label>\r\n      </div>\r\n      <div className=\"notifications-list\">\r\n        {notifications.map((notification) => (\r\n          <div key={notification.id} className=\"notification\">\r\n            {notification.message}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotificationsPanel;\r\n","import React from 'react';\nimport './App.css';\nimport FlightStatusDashboard from './components/FlightStatusDashboard';\nimport NotificationsPanel from './components/NotificationsPanel';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <header>\n        <h1>Flight Status and Notifications System</h1>\n      </header>\n      <main>\n        <FlightStatusDashboard />\n        <NotificationsPanel />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// src/firebase-config.js\r\n\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getMessaging } from 'firebase/messaging';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBb0p9GdUeC9JKGtnOxWNQqlHhLRKN_UJU\",\r\n  authDomain: \"flightstatusapp-49d34.firebaseapp.com\",\r\n  projectId: \"flightstatusapp-49d34\",\r\n  storageBucket: \"flightstatusapp-49d34.appspot.com\",\r\n  messagingSenderId: \"378544592523\",\r\n  appId: \"1:378544592523:web:e8b3a4c132793673ba668e\",\r\n  measurementId: \"G-WNT7HT5Q1C\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Initialize Firebase Messaging\r\nconst messaging = getMessaging(app);\r\n\r\nexport { messaging };\r\n","// src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/App.css'; // Custom styles\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap CSS\nimport App from './App';\nimport firebase from 'firebase/app';\nimport 'firebase/messaging';\nimport { messaging } from './firebase-config';\nimport { getToken, onMessage } from 'firebase/messaging';\n\n// VAPID key for FCM\nconst VAPID_KEY = 'BBA4c7wzHiOe90p1mmnTGQHeb7Td6N363N1VB1VuwVf_yFIVOB2F1OA3kK0WF00STSRKkwN6hBm08pgI_N9DOJM';\n\n// Request permission to receive notifications\nconst requestNotificationPermission = async () => {\n  try {\n    const permission = await Notification.requestPermission();\n    if (permission === 'granted') {\n      console.log('Notification permission granted.');\n      // Get the device token\n      getDeviceToken();\n    } else {\n      console.log('Unable to get permission to notify.');\n    }\n  } catch (error) {\n    console.error('Error requesting notification permission:', error);\n  }\n};\n\n// Function to get the device token\nconst getDeviceToken = async () => {\n  try {\n    const token = await getToken(messaging, { vapidKey: VAPID_KEY });\n    if (token) {\n      console.log('Device token:', token);\n      // Send the token to your server and store it for later use\n      sendTokenToServer(token);\n    } else {\n      console.log('No registration token available. Request permission to generate one.');\n    }\n  } catch (error) {\n    console.error('An error occurred while retrieving token. ', error);\n  }\n};\n\n// Send the device token to the server\nconst sendTokenToServer = async (token) => {\n  try {\n    const response = await fetch('/send-notification', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ token }),\n    });\n\n    if (response.ok) {\n      console.log('Token successfully sent to the server');\n    } else {\n      console.error('Failed to send token to server');\n    }\n  } catch (error) {\n    console.error('Error sending token to server:', error);\n  }\n};\n\n// Listen for incoming messages while the app is in the foreground\nonMessage(messaging, (payload) => {\n  console.log('Message received. ', payload);\n  // Display an alert or custom notification\n  alert(`Notification: ${payload.notification.title} - ${payload.notification.body}`);\n});\n\n// Request notification permission on page load\nrequestNotificationPermission();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}